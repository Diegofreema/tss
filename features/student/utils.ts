import * as FileSystem from 'expo-file-system';
import * as MediaLibrary from 'expo-media-library';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import { Alert, Platform } from 'react-native';

export const requestPermissions = async () => {
  if (Platform.OS === 'android') {
    const { status } = await MediaLibrary.requestPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert(
        'Permission Required',
        'Please grant media library permission to save PDF files.'
      );
      return false;
    }
  }
  return true;
};

export const exportHTMLToPDF = async () => {
  try {
    const htmlContent = `
        <html>
          <head>
            <meta charset="utf-8">
            <title>My Document</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                margin: 20px;
                line-height: 1.6;
              }
              h1 {
                color: #333;
                border-bottom: 2px solid #007AFF;
                padding-bottom: 10px;
              }
              .content {
                margin-top: 20px;
              }
              .footer {
                margin-top: 50px;
                text-align: center;
                color: #666;
                font-size: 12px;
              }
            </style>
          </head>
          <body>
            <h1>Sample Document</h1>
            <div class="content">
              <p>This is a sample PDF document generated from HTML content.</p>
              <p>Date: ${new Date().toLocaleDateString()}</p>
              <p>Generated by: My React Native App</p>
            </div>
            <div class="footer">
              <p>Â© 2024 My Company. All rights reserved.</p>
            </div>
          </body>
        </html>
      `;

    // Generate PDF from HTML
    const { uri } = await Print.printToFileAsync({
      html: htmlContent,
      base64: false,
      width: 612,
      height: 792,
    });

    await savePDFToDevice(uri, 'sample-document.pdf');
  } catch (error) {
    console.error('Error generating PDF:', error);
    Alert.alert('Error', 'Failed to generate PDF. Please try again.');
  } finally {
  }
};

// Save PDF to device storage
export const savePDFToDevice = async (uri: string, filename: string) => {
  try {
    const hasPermission = await requestPermissions();
    if (!hasPermission) return;

    if (Platform.OS === 'ios') {
      // iOS: Use sharing
      await Sharing.shareAsync(uri, {
        mimeType: 'application/pdf',
        dialogTitle: 'Save PDF',
        UTI: 'com.adobe.pdf',
      });
    } else {
      // Android: Save to downloads folder
      const downloadsPath = `${FileSystem.documentDirectory}Downloads/`;

      // Ensure downloads directory exists
      const dirInfo = await FileSystem.getInfoAsync(downloadsPath);
      if (!dirInfo.exists) {
        await FileSystem.makeDirectoryAsync(downloadsPath, {
          intermediates: true,
        });
      }

      const localUri = `${downloadsPath}${filename}`;
      await FileSystem.copyAsync({
        from: uri,
        to: localUri,
      });

      // Save to media library
      const asset = await MediaLibrary.createAssetAsync(localUri);
      await MediaLibrary.createAlbumAsync('PDFs', asset, false);

      Alert.alert('Success', `PDF saved to Downloads folder as ${filename}`, [
        {
          text: 'Share',
          onPress: () => Sharing.shareAsync(localUri),
        },
        { text: 'OK' },
      ]);
    }
  } catch (error) {
    console.error('Error saving PDF:', error);
    Alert.alert('Error', 'Failed to save PDF. Please try again.');
  }
};

export const getGrade = (grade: number): string => {
  if (grade >= 75) {
    return 'A';
  }
  if (grade >= 70) {
    return 'B';
  }
  if (grade >= 50) {
    return 'C';
  }
  if (grade >= 45) {
    return 'D';
  }
  if (grade >= 40) {
    return 'E';
  }
  return 'NI';
};

export const getLetterGrade = (grade: string): string => {
  switch (grade) {
    case 'A':
      return 'Excellent';
    case 'B':
      return 'V. Good';
    case 'C':
      return 'Good';
    case 'D':
      return 'Average';
    case 'E':
      return 'Pass';
    default:
      return 'NI';
  }
};
